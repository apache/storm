/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)")
public class Credentials implements org.apache.storm.thrift.TBase<Credentials, Credentials._Fields>, java.io.Serializable, Cloneable, Comparable<Credentials> {
  private static final org.apache.storm.thrift.protocol.TStruct STRUCT_DESC = new org.apache.storm.thrift.protocol.TStruct("Credentials");

  private static final org.apache.storm.thrift.protocol.TField CREDS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField("creds", org.apache.storm.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.storm.thrift.protocol.TField TOPO_OWNER_FIELD_DESC = new org.apache.storm.thrift.protocol.TField("topoOwner", org.apache.storm.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.storm.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CredentialsStandardSchemeFactory();
  private static final org.apache.storm.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CredentialsTupleSchemeFactory();

  private @org.apache.storm.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> creds; // required
  private @org.apache.storm.thrift.annotation.Nullable java.lang.String topoOwner; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.storm.thrift.TFieldIdEnum {
    CREDS((short)1, "creds"),
    TOPO_OWNER((short)2, "topoOwner");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREDS
          return CREDS;
        case 2: // TOPO_OWNER
          return TOPO_OWNER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TOPO_OWNER};
  public static final java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREDS, new org.apache.storm.thrift.meta_data.FieldMetaData("creds", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.storm.thrift.meta_data.MapMetaData(org.apache.storm.thrift.protocol.TType.MAP, 
            new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING), 
            new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOPO_OWNER, new org.apache.storm.thrift.meta_data.FieldMetaData("topoOwner", org.apache.storm.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.storm.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Credentials.class, metaDataMap);
  }

  public Credentials() {
  }

  public Credentials(
    java.util.Map<java.lang.String,java.lang.String> creds)
  {
    this();
    this.creds = creds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Credentials(Credentials other) {
    if (other.is_set_creds()) {
      java.util.Map<java.lang.String,java.lang.String> __this__creds = new java.util.HashMap<java.lang.String,java.lang.String>(other.creds);
      this.creds = __this__creds;
    }
    if (other.is_set_topoOwner()) {
      this.topoOwner = other.topoOwner;
    }
  }

  public Credentials deepCopy() {
    return new Credentials(this);
  }

  @Override
  public void clear() {
    this.creds = null;
    this.topoOwner = null;
  }

  public int get_creds_size() {
    return (this.creds == null) ? 0 : this.creds.size();
  }

  public void put_to_creds(java.lang.String key, java.lang.String val) {
    if (this.creds == null) {
      this.creds = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.creds.put(key, val);
  }

  @org.apache.storm.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> get_creds() {
    return this.creds;
  }

  public void set_creds(@org.apache.storm.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> creds) {
    this.creds = creds;
  }

  public void unset_creds() {
    this.creds = null;
  }

  /** Returns true if field creds is set (has been assigned a value) and false otherwise */
  public boolean is_set_creds() {
    return this.creds != null;
  }

  public void set_creds_isSet(boolean value) {
    if (!value) {
      this.creds = null;
    }
  }

  @org.apache.storm.thrift.annotation.Nullable
  public java.lang.String get_topoOwner() {
    return this.topoOwner;
  }

  public void set_topoOwner(@org.apache.storm.thrift.annotation.Nullable java.lang.String topoOwner) {
    this.topoOwner = topoOwner;
  }

  public void unset_topoOwner() {
    this.topoOwner = null;
  }

  /** Returns true if field topoOwner is set (has been assigned a value) and false otherwise */
  public boolean is_set_topoOwner() {
    return this.topoOwner != null;
  }

  public void set_topoOwner_isSet(boolean value) {
    if (!value) {
      this.topoOwner = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.storm.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CREDS:
      if (value == null) {
        unset_creds();
      } else {
        set_creds((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case TOPO_OWNER:
      if (value == null) {
        unset_topoOwner();
      } else {
        set_topoOwner((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.storm.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CREDS:
      return get_creds();

    case TOPO_OWNER:
      return get_topoOwner();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CREDS:
      return is_set_creds();
    case TOPO_OWNER:
      return is_set_topoOwner();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Credentials)
      return this.equals((Credentials)that);
    return false;
  }

  public boolean equals(Credentials that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_creds = true && this.is_set_creds();
    boolean that_present_creds = true && that.is_set_creds();
    if (this_present_creds || that_present_creds) {
      if (!(this_present_creds && that_present_creds))
        return false;
      if (!this.creds.equals(that.creds))
        return false;
    }

    boolean this_present_topoOwner = true && this.is_set_topoOwner();
    boolean that_present_topoOwner = true && that.is_set_topoOwner();
    if (this_present_topoOwner || that_present_topoOwner) {
      if (!(this_present_topoOwner && that_present_topoOwner))
        return false;
      if (!this.topoOwner.equals(that.topoOwner))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_creds()) ? 131071 : 524287);
    if (is_set_creds())
      hashCode = hashCode * 8191 + creds.hashCode();

    hashCode = hashCode * 8191 + ((is_set_topoOwner()) ? 131071 : 524287);
    if (is_set_topoOwner())
      hashCode = hashCode * 8191 + topoOwner.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Credentials other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_creds()).compareTo(other.is_set_creds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_creds()) {
      lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.creds, other.creds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_topoOwner()).compareTo(other.is_set_topoOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topoOwner()) {
      lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.topoOwner, other.topoOwner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.storm.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.storm.thrift.protocol.TProtocol iprot) throws org.apache.storm.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.storm.thrift.protocol.TProtocol oprot) throws org.apache.storm.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Credentials(");
    boolean first = true;

    sb.append("creds:");
    if (this.creds == null) {
      sb.append("null");
    } else {
      sb.append(this.creds);
    }
    first = false;
    if (is_set_topoOwner()) {
      if (!first) sb.append(", ");
      sb.append("topoOwner:");
      if (this.topoOwner == null) {
        sb.append("null");
      } else {
        sb.append(this.topoOwner);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.storm.thrift.TException {
    // check for required fields
    if (!is_set_creds()) {
      throw new org.apache.storm.thrift.protocol.TProtocolException("Required field 'creds' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.storm.thrift.protocol.TCompactProtocol(new org.apache.storm.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.storm.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.storm.thrift.protocol.TCompactProtocol(new org.apache.storm.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.storm.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CredentialsStandardSchemeFactory implements org.apache.storm.thrift.scheme.SchemeFactory {
    public CredentialsStandardScheme getScheme() {
      return new CredentialsStandardScheme();
    }
  }

  private static class CredentialsStandardScheme extends org.apache.storm.thrift.scheme.StandardScheme<Credentials> {

    public void read(org.apache.storm.thrift.protocol.TProtocol iprot, Credentials struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.storm.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREDS
            if (schemeField.type == org.apache.storm.thrift.protocol.TType.MAP) {
              {
                org.apache.storm.thrift.protocol.TMap _map646 = iprot.readMapBegin();
                struct.creds = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map646.size);
                @org.apache.storm.thrift.annotation.Nullable java.lang.String _key647;
                @org.apache.storm.thrift.annotation.Nullable java.lang.String _val648;
                for (int _i649 = 0; _i649 < _map646.size; ++_i649)
                {
                  _key647 = iprot.readString();
                  _val648 = iprot.readString();
                  struct.creds.put(_key647, _val648);
                }
                iprot.readMapEnd();
              }
              struct.set_creds_isSet(true);
            } else { 
              org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPO_OWNER
            if (schemeField.type == org.apache.storm.thrift.protocol.TType.STRING) {
              struct.topoOwner = iprot.readString();
              struct.set_topoOwner_isSet(true);
            } else { 
              org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.storm.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.storm.thrift.protocol.TProtocol oprot, Credentials struct) throws org.apache.storm.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.creds != null) {
        oprot.writeFieldBegin(CREDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.storm.thrift.protocol.TMap(org.apache.storm.thrift.protocol.TType.STRING, org.apache.storm.thrift.protocol.TType.STRING, struct.creds.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter650 : struct.creds.entrySet())
          {
            oprot.writeString(_iter650.getKey());
            oprot.writeString(_iter650.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topoOwner != null) {
        if (struct.is_set_topoOwner()) {
          oprot.writeFieldBegin(TOPO_OWNER_FIELD_DESC);
          oprot.writeString(struct.topoOwner);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CredentialsTupleSchemeFactory implements org.apache.storm.thrift.scheme.SchemeFactory {
    public CredentialsTupleScheme getScheme() {
      return new CredentialsTupleScheme();
    }
  }

  private static class CredentialsTupleScheme extends org.apache.storm.thrift.scheme.TupleScheme<Credentials> {

    @Override
    public void write(org.apache.storm.thrift.protocol.TProtocol prot, Credentials struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TTupleProtocol oprot = (org.apache.storm.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.creds.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter651 : struct.creds.entrySet())
        {
          oprot.writeString(_iter651.getKey());
          oprot.writeString(_iter651.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.is_set_topoOwner()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_topoOwner()) {
        oprot.writeString(struct.topoOwner);
      }
    }

    @Override
    public void read(org.apache.storm.thrift.protocol.TProtocol prot, Credentials struct) throws org.apache.storm.thrift.TException {
      org.apache.storm.thrift.protocol.TTupleProtocol iprot = (org.apache.storm.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.storm.thrift.protocol.TMap _map652 = new org.apache.storm.thrift.protocol.TMap(org.apache.storm.thrift.protocol.TType.STRING, org.apache.storm.thrift.protocol.TType.STRING, iprot.readI32());
        struct.creds = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map652.size);
        @org.apache.storm.thrift.annotation.Nullable java.lang.String _key653;
        @org.apache.storm.thrift.annotation.Nullable java.lang.String _val654;
        for (int _i655 = 0; _i655 < _map652.size; ++_i655)
        {
          _key653 = iprot.readString();
          _val654 = iprot.readString();
          struct.creds.put(_key653, _val654);
        }
      }
      struct.set_creds_isSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.topoOwner = iprot.readString();
        struct.set_topoOwner_isSet(true);
      }
    }
  }

  private static <S extends org.apache.storm.thrift.scheme.IScheme> S scheme(org.apache.storm.thrift.protocol.TProtocol proto) {
    return (org.apache.storm.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

